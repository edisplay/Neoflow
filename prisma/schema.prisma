generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement()) //sequence()
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  projects      Project[]    @relation("user-project")
  accounts      Account[]
  sessions      Session[]
  teamFounder   Team[]       @relation("creator")
  memberShip    MemberShip[] @relation("user-member")
}

model Project {
  id        String   @id @default(uuid())
  title     String
  state     String?
  // state     String?  @db.LongText
  autherId  String
  isSolo    Boolean
  auther    User     @relation("user-project", fields: [autherId], references: [id])
  teamId    String?
  Team      Team?    @relation("project-team", fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt DateTime @updatedAt
  createAt  DateTime @default(now())
}

model Team {
  id               String             @id @default(uuid())
  name             String
  color            String
  autherId         String
  auther           User               @relation("creator", fields: [autherId], references: [id])
  memberShip       MemberShip[]       @relation("member-team")
  Project          Project[]          @relation("project-team")
  invitationState  Boolean            @default(false)
  invitationCode   String?
  updatedAt        DateTime           @updatedAt
  createAt         DateTime           @default(now())
  IndividualInvite IndividualInvite[] @relation("ivite-team")
}

model MemberShip {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("user-member", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId    String
  team      Team     @relation("member-team", fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role      String   @default("reader")
  updatedAt DateTime @updatedAt
  createAt  DateTime @default(now())
}

model IndividualInvite {
  id             String   @id @default(uuid())
  invitationCode String?
  email          String
  teamId         String
  team           Team     @relation("ivite-team", fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  updatedAt      DateTime @updatedAt
  createAt       DateTime @default(now())
}
